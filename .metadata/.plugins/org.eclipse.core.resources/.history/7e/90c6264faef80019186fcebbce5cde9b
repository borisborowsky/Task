package com.company.users;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.Store;

import com.company.books.Book;
import com.company.books.BookUnit;
import com.company.books.Fine;


@Entity
@Table(name="member_tbl")
@Indexed
public class Member extends Person {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "member_id")
	private int id;
	
	@Embedded
	private Account account;
	

	@IndexedEmbedded
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "member", fetch = FetchType.EAGER)
	private List<BookUnit> borrowedBoooks;
	
	@IndexedEmbedded
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "member", fetch = FetchType.EAGER)
	private final List<Fine> fines;

     public Member() {
		id = 0;
		account = null;
		borrowedBoooks = new ArrayList<>();
		fines = new ArrayList<>();
	}
	
     
	
      public Member(String name, String phone, String country,
			String city, String postCode, Gender gender, String username, 
			String password) {
		super(name, phone, country, city, postCode, gender);
		this.account = new Account(username, password);
		this.borrowedBoooks = new ArrayList<>();
		this.fines = new ArrayList<>();
		id = 0;
	}

	
    public List<BookUnit> getBorrowedBooks() {
    	return borrowedBoooks;
    }
	
	public static class Account {
		enum AccountStatus { ACTIVE, CLOSED, BLACKLISTED ,NONE }
		private String username;
		private String password;
		private String token;
	
		@Enumerated(EnumType.STRING)
		private AccountStatus status;
		
		public Account() {}
		
		public Account(String username, String password) {
			this.username = username;
			this.password = password;
			this.token = token;
			this.status = AccountStatus.ACTIVE;
			
		}

		public String getUsername() {
			return username;
		}

		public void setUsername(String username) {
			this.username = username;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		public AccountStatus getStatus() {
			return status;
		}

		public void setStatus(AccountStatus status) {
			this.status = status;
		}

		public String getToken() {
			return token;
		}

		public void setToken(String token) {
			this.token = token;
			
		}

	}

	public List<Fine> getFines() {
		return fines;
	}

	public int getId() {
		return id;
	}


	public Account getAccount() {
		return account;
	}


	public List<BookUnit> getBorrowedBoooks() {
		return borrowedBoooks;
	}
	

	@Override
	public String toString() {
		return "Member [id=" + id + ", account=" + account + ", borrowedBoooks=" + borrowedBoooks + "]";
	}
//	
//	@IndexedEmbedded
//	@OneToMany(cascade = CascadeType.ALL, mappedBy = "member")
//	@LazyCollection(LazyCollectionOption.FALSE)
}
