package com.company.app;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.ws.rs.core.HttpHeaders;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import com.company.app.data.BookView;
import com.company.app.utils.FComponent;
import com.company.catalogue.BookUnit;

public class Administrator extends JFrame {
	private static final String REMOVE_BOOK_ENDPOINT = "http://localhost:8080/company/webapi/books/remove/book";
	
	private final Container container;

	private final JTextField tAuthour;
	private final JTextField tBorrowPrice;
	private final JTextField tSubject;
	private final JTextField tTitle;
	private final JTextField tType;
	private final JTextField tBookStatus;

	private final JComboBox cbYear;
	private final JComboBox cbMonth;
	private final JComboBox cbDates;

	private final JButton btnAdd;
	private final JButton btnRemove;

	public Administrator() {
		setTitle("Administrator Panel");
		setBounds(300, 90, 900, 600);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setResizable(false);

		FComponent.getJLabel(this, "Manage Books", 30, 300, 30, 300, 30);
		
		FComponent.getJLabel(this, "Author", 15, 100, 20, 100, 100);
		FComponent.getJLabel(this, "Publish Date", 15, 100, 20, 100, 150);
		FComponent.getJLabel(this, "Borrow Price", 15, 100, 20, 100, 200);
		FComponent.getJLabel(this, "Subject", 15, 100, 20, 100, 250);
		FComponent.getJLabel(this, "Title", 15, 100, 20, 100, 300);
		FComponent.getJLabel(this, "Type", 15, 100, 20, 100, 350);
		FComponent.getJLabel(this, "Book Status", 15, 100, 20, 100, 400);

		tAuthour = FComponent.getJTextField(this, 15, 200, 20, 200, 100);

		cbDates = FComponent.getJComboBox(this, dates, 15, 80, 20, 200, 150);
		cbMonth = FComponent.getJComboBox(this, months, 15, 80, 20, 270, 150);
		cbYear = FComponent.getJComboBox(this, years, 15, 80, 20, 370, 150);

		tBorrowPrice = FComponent. getJTextField(this, 15, 200, 20, 200, 200);
		tSubject = FComponent.getJTextField(this, 15, 200, 20, 200, 250);
		tTitle = FComponent.getJTextField(this, 15, 200, 20, 200, 300);
		tType = FComponent.getJTextField(this, 15, 200, 20, 200, 350);
		tBookStatus = FComponent.getJTextField(this, 15, 200, 75, 200, 400);

		btnAdd = FComponent.getJButton(this, "Add", 15, 100, 20, 530, 540, 
				(ActionListener) a -> createBook().execute());
		
		btnRemove = FComponent.getJButton(this, "Remove", 
				15, 100, 20, 580, 540, (ActionListener) a -> {});

		container = getContentPane();
		container.setLayout(null);

		setVisible(true);
	}

	private class BookService extends SwingWorker<BookUnit, Void> {
		private String json;

		public BookService(String json) {
			this.json = json;
		}

		private void updateBook() throws UnsupportedOperationException, IOException {
			CloseableHttpClient httpClient = HttpClients.createDefault();

			HttpEntity httpEntity = new StringEntity(json, ContentType.APPLICATION_JSON);

			HttpPost httpPost = new HttpPost(REMOVE_BOOK_ENDPOINT);
			httpPost.setEntity(httpEntity);
			httpPost.setHeader(HttpHeaders.AUTHORIZATION, App.getToken());
			
			CloseableHttpResponse response = httpClient.execute(httpPost);

			try {

				if (response.getStatusLine().getStatusCode() != 200) {
					throw new RuntimeException(
							"Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
				}

				BufferedReader br = new BufferedReader(new InputStreamReader((response.getEntity().getContent())));
				System.out.println("Output from server ... \n");

			} finally {
				if (httpClient != null)
					httpClient.close();
				if (response != null)
					httpClient.close();
			}
		}

		@Override
		protected BookUnit doInBackground() {
			System.out.println("Do in background");
			try {
				updateBook();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}
	}

	private BookService createBook() {
		String year = (String) cbYear.getSelectedItem();
		String month = (String) cbMonth.getSelectedItem();
		String day = (String) cbDates.getSelectedItem();
		String date = FComponent.convertCbtoString(year, month, day);
		double borrowPrice = Double.parseDouble(tBorrowPrice.getText());
		
		BookView book = new BookView(0, tTitle.getText(), tType.getText(), tSubject.getText(),
				tAuthour.getText(), date, borrowPrice, tBookStatus.getText());
		String json = book.createJsonString();
		System.out.println(json + " im api");
		return new BookService(json);
	}


	final private String dates[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15",
			"16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" };
	final private String months[] = { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
	final private String years[] = { "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004",
			"2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017",
			"2018", "2019" };
	
	
}
